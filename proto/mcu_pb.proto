syntax = "proto3";

message Alarms {
  uint32 time = 1;
  bool alarm_one = 2;
  bool alarm_two = 3;
}

message AlarmLimits {
  uint32 rr_min = 1;
  uint32 rr_max = 2;
  uint32 pip_min = 3;
  uint32 pip_max = 4;
  uint32 peep_min = 5;
  uint32 peep_max = 6;
  uint32 ip_above_peep_min = 7;
  uint32 ip_above_peep_max = 8;
  uint32 insp_time_min = 9;
  uint32 insp_time_max = 10;
  uint32 fio2_min = 11;
  uint32 fio2_max = 12;
  uint32 paw_min = 13;
  uint32 paw_max = 14;
  uint32 mve_min = 15;
  uint32 mve_max = 16;
  uint32 tv_min = 17;
  uint32 tv_max = 18;
  uint32 etco2_min = 19;
  uint32 etco2_max = 20;
  uint32 flow_min = 21;
  uint32 flow_max = 22;
  uint32 apnea_min = 23;
  uint32 apnea_max = 24;
  uint32 spo2_min = 25;
  uint32 spo2_max = 26;
}

message AlarmLimitsRequest {
  uint32 rr_min = 1;
  uint32 rr_max = 2;
  uint32 pip_min = 3;
  uint32 pip_max = 4;
  uint32 peep_min = 5;
  uint32 peep_max = 6;
  uint32 ip_above_peep_min = 7;
  uint32 ip_above_peep_max = 8;
  uint32 insp_time_min = 9;
  uint32 insp_time_max = 10;
  uint32 fio2_min = 11;
  uint32 fio2_max = 12;
  uint32 paw_min = 13;
  uint32 paw_max = 14;
  uint32 mve_min = 15;
  uint32 mve_max = 16;
  uint32 tv_min = 17;
  uint32 tv_max = 18;
  uint32 etco2_min = 19;
  uint32 etco2_max = 20;
  uint32 flow_min = 21;
  uint32 flow_max = 22;
  uint32 apnea_min = 23;
  uint32 apnea_max = 24;
  uint32 spo2_min = 25;
  uint32 spo2_max = 26;
}

message SensorMeasurements {
  uint32 time = 1;
  uint32 cycle = 2;
  float paw = 3;
  float flow = 4;
  float volume = 5;
  float fio2 = 6;
  float spo2 = 7;
}

message CycleMeasurements {
  uint32 time = 1;
  float vt = 2;
  float rr = 3;
  float peep = 4;
  float pip = 5;
  float ip = 6;
  float ve = 7;
}

enum VentilationMode {
  pc_ac = 0;
  pc_simv = 1;
  vc_ac = 2;
  vc_simv = 3;
  psv = 4;
  niv = 5;
  hfnc = 6;
}

message Parameters {
  uint32 time = 1;
  VentilationMode mode = 2;
  float pip = 3;
  float peep = 4;
  float vt = 5;
  float rr = 6;
  float ie = 7;
  float fio2 = 8;
  float flow = 9;
  bool ventilating = 10;
}

message ParametersRequest {
  uint32 time = 1;
  VentilationMode mode = 2;
  float pip = 3;
  float peep = 4;
  float vt = 5;
  float rr = 6;
  float ie = 7;
  float fio2 = 8;
  float flow = 9;
  bool ventilating = 10;
}

// Testing messages

message Ping {
  uint32 time = 1;
  uint32 id = 2;
}

message Announcement {
  uint32 time = 1;
  bytes announcement = 2;
}

// Log Events
enum LogEventCode {
  fio2_too_low = 0;
  fio2_too_high = 1;
  spo2_too_low = 2;
  spo2_too_high = 3;
  rr_too_low = 4;
  rr_too_high = 5;
  battery_low = 6;
  screen_locked = 7;
}

message LogEvent {
  uint32 id = 1;
  uint32 time = 2;
  LogEventCode code = 3;
  float old_value = 4;
  float new_value = 5;
}

message ExpectedLogEvent {
  uint32 id = 1;
}

message NextLogEvents {
  uint32 next_expected = 1;
  uint32 total = 2;
  uint32 remaining = 3;
  repeated LogEvent elements  = 4;
}

message ActiveLogEvents {
  repeated uint32 id = 1;
}

// Power Management

message BatteryPower {
  uint32 power_left = 1;
}

// Hardware Buttons

message ScreenStatus {
  bool lock = 1;
}
