/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.3 */

#ifndef PB_MCU_PB_H_INCLUDED
#define PB_MCU_PB_H_INCLUDED
#include "nanopb/pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _VentilationMode {
    VentilationMode_pc_ac = 0,
    VentilationMode_pc_simv = 1,
    VentilationMode_vc_ac = 2,
    VentilationMode_vc_simv = 3,
    VentilationMode_psv = 4,
    VentilationMode_niv = 5,
    VentilationMode_hfnc = 6
} VentilationMode;

typedef enum _LogEventCode {
    LogEventCode_fio2_too_low = 0,
    LogEventCode_fio2_too_high = 1,
    LogEventCode_spo2_too_low = 2,
    LogEventCode_spo2_too_high = 3,
    LogEventCode_rr_too_low = 4,
    LogEventCode_rr_too_high = 5,
    LogEventCode_battery_low = 6,
    LogEventCode_screen_locked = 7
} LogEventCode;

/* Struct definitions */
typedef struct _ActiveLogEvents {
    pb_callback_t id;
} ActiveLogEvents;

typedef struct _AlarmLimits {
    uint32_t rr_min;
    uint32_t rr_max;
    uint32_t pip_min;
    uint32_t pip_max;
    uint32_t peep_min;
    uint32_t peep_max;
    uint32_t ip_above_peep_min;
    uint32_t ip_above_peep_max;
    uint32_t insp_time_min;
    uint32_t insp_time_max;
    uint32_t fio2_min;
    uint32_t fio2_max;
    uint32_t paw_min;
    uint32_t paw_max;
    uint32_t mve_min;
    uint32_t mve_max;
    uint32_t tv_min;
    uint32_t tv_max;
    uint32_t etco2_min;
    uint32_t etco2_max;
    uint32_t flow_min;
    uint32_t flow_max;
    uint32_t apnea_min;
    uint32_t apnea_max;
    uint32_t spo2_min;
    uint32_t spo2_max;
} AlarmLimits;

typedef struct _AlarmLimitsRequest {
    uint32_t rr_min;
    uint32_t rr_max;
    uint32_t pip_min;
    uint32_t pip_max;
    uint32_t peep_min;
    uint32_t peep_max;
    uint32_t ip_above_peep_min;
    uint32_t ip_above_peep_max;
    uint32_t insp_time_min;
    uint32_t insp_time_max;
    uint32_t fio2_min;
    uint32_t fio2_max;
    uint32_t paw_min;
    uint32_t paw_max;
    uint32_t mve_min;
    uint32_t mve_max;
    uint32_t tv_min;
    uint32_t tv_max;
    uint32_t etco2_min;
    uint32_t etco2_max;
    uint32_t flow_min;
    uint32_t flow_max;
    uint32_t apnea_min;
    uint32_t apnea_max;
    uint32_t spo2_min;
    uint32_t spo2_max;
} AlarmLimitsRequest;

typedef struct _Alarms {
    uint32_t time;
    bool alarm_one;
    bool alarm_two;
} Alarms;

typedef PB_BYTES_ARRAY_T(64) Announcement_announcement_t;
typedef struct _Announcement {
    uint32_t time;
    Announcement_announcement_t announcement;
} Announcement;

typedef struct _BatteryPower {
    uint32_t power_left;
} BatteryPower;

typedef struct _CycleMeasurements {
    uint32_t time;
    float vt;
    float rr;
    float peep;
    float pip;
    float ip;
    float ve;
} CycleMeasurements;

typedef struct _ExpectedLogEvent {
    uint32_t id;
} ExpectedLogEvent;

typedef struct _LogEvent {
    uint32_t id;
    uint32_t time;
    LogEventCode code;
    float old_value;
    float new_value;
} LogEvent;

typedef struct _NextLogEvents {
    uint32_t next_expected;
    uint32_t total;
    uint32_t remaining;
    pb_callback_t elements;
} NextLogEvents;

typedef struct _Parameters {
    uint32_t time;
    VentilationMode mode;
    float pip;
    float peep;
    float vt;
    float rr;
    float ie;
    float fio2;
    float flow;
    bool ventilating;
} Parameters;

typedef struct _ParametersRequest {
    uint32_t time;
    VentilationMode mode;
    float pip;
    float peep;
    float vt;
    float rr;
    float ie;
    float fio2;
    float flow;
    bool ventilating;
} ParametersRequest;

typedef struct _Ping {
    uint32_t time;
    uint32_t id;
} Ping;

typedef struct _ScreenStatus {
    bool lock;
} ScreenStatus;

typedef struct _SensorMeasurements {
    uint32_t time;
    uint32_t cycle;
    float paw;
    float flow;
    float volume;
    float fio2;
    float spo2;
} SensorMeasurements;


/* Helper constants for enums */
#define _VentilationMode_MIN VentilationMode_pc_ac
#define _VentilationMode_MAX VentilationMode_hfnc
#define _VentilationMode_ARRAYSIZE ((VentilationMode)(VentilationMode_hfnc+1))

#define _LogEventCode_MIN LogEventCode_fio2_too_low
#define _LogEventCode_MAX LogEventCode_screen_locked
#define _LogEventCode_ARRAYSIZE ((LogEventCode)(LogEventCode_screen_locked+1))


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define Alarms_init_default                      {0, 0, 0}
#define AlarmLimits_init_default                 {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define AlarmLimitsRequest_init_default          {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define SensorMeasurements_init_default          {0, 0, 0, 0, 0, 0, 0}
#define CycleMeasurements_init_default           {0, 0, 0, 0, 0, 0, 0}
#define Parameters_init_default                  {0, _VentilationMode_MIN, 0, 0, 0, 0, 0, 0, 0, 0}
#define ParametersRequest_init_default           {0, _VentilationMode_MIN, 0, 0, 0, 0, 0, 0, 0, 0}
#define Ping_init_default                        {0, 0}
#define Announcement_init_default                {0, {0, {0}}}
#define LogEvent_init_default                    {0, 0, _LogEventCode_MIN, 0, 0}
#define ExpectedLogEvent_init_default            {0}
#define NextLogEvents_init_default               {0, 0, 0, {{NULL}, NULL}}
#define ActiveLogEvents_init_default             {{{NULL}, NULL}}
#define BatteryPower_init_default                {0}
#define ScreenStatus_init_default                {0}
#define Alarms_init_zero                         {0, 0, 0}
#define AlarmLimits_init_zero                    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define AlarmLimitsRequest_init_zero             {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define SensorMeasurements_init_zero             {0, 0, 0, 0, 0, 0, 0}
#define CycleMeasurements_init_zero              {0, 0, 0, 0, 0, 0, 0}
#define Parameters_init_zero                     {0, _VentilationMode_MIN, 0, 0, 0, 0, 0, 0, 0, 0}
#define ParametersRequest_init_zero              {0, _VentilationMode_MIN, 0, 0, 0, 0, 0, 0, 0, 0}
#define Ping_init_zero                           {0, 0}
#define Announcement_init_zero                   {0, {0, {0}}}
#define LogEvent_init_zero                       {0, 0, _LogEventCode_MIN, 0, 0}
#define ExpectedLogEvent_init_zero               {0}
#define NextLogEvents_init_zero                  {0, 0, 0, {{NULL}, NULL}}
#define ActiveLogEvents_init_zero                {{{NULL}, NULL}}
#define BatteryPower_init_zero                   {0}
#define ScreenStatus_init_zero                   {0}

/* Field tags (for use in manual encoding/decoding) */
#define ActiveLogEvents_id_tag                   1
#define AlarmLimits_rr_min_tag                   1
#define AlarmLimits_rr_max_tag                   2
#define AlarmLimits_pip_min_tag                  3
#define AlarmLimits_pip_max_tag                  4
#define AlarmLimits_peep_min_tag                 5
#define AlarmLimits_peep_max_tag                 6
#define AlarmLimits_ip_above_peep_min_tag        7
#define AlarmLimits_ip_above_peep_max_tag        8
#define AlarmLimits_insp_time_min_tag            9
#define AlarmLimits_insp_time_max_tag            10
#define AlarmLimits_fio2_min_tag                 11
#define AlarmLimits_fio2_max_tag                 12
#define AlarmLimits_paw_min_tag                  13
#define AlarmLimits_paw_max_tag                  14
#define AlarmLimits_mve_min_tag                  15
#define AlarmLimits_mve_max_tag                  16
#define AlarmLimits_tv_min_tag                   17
#define AlarmLimits_tv_max_tag                   18
#define AlarmLimits_etco2_min_tag                19
#define AlarmLimits_etco2_max_tag                20
#define AlarmLimits_flow_min_tag                 21
#define AlarmLimits_flow_max_tag                 22
#define AlarmLimits_apnea_min_tag                23
#define AlarmLimits_apnea_max_tag                24
#define AlarmLimits_spo2_min_tag                 25
#define AlarmLimits_spo2_max_tag                 26
#define AlarmLimitsRequest_rr_min_tag            1
#define AlarmLimitsRequest_rr_max_tag            2
#define AlarmLimitsRequest_pip_min_tag           3
#define AlarmLimitsRequest_pip_max_tag           4
#define AlarmLimitsRequest_peep_min_tag          5
#define AlarmLimitsRequest_peep_max_tag          6
#define AlarmLimitsRequest_ip_above_peep_min_tag 7
#define AlarmLimitsRequest_ip_above_peep_max_tag 8
#define AlarmLimitsRequest_insp_time_min_tag     9
#define AlarmLimitsRequest_insp_time_max_tag     10
#define AlarmLimitsRequest_fio2_min_tag          11
#define AlarmLimitsRequest_fio2_max_tag          12
#define AlarmLimitsRequest_paw_min_tag           13
#define AlarmLimitsRequest_paw_max_tag           14
#define AlarmLimitsRequest_mve_min_tag           15
#define AlarmLimitsRequest_mve_max_tag           16
#define AlarmLimitsRequest_tv_min_tag            17
#define AlarmLimitsRequest_tv_max_tag            18
#define AlarmLimitsRequest_etco2_min_tag         19
#define AlarmLimitsRequest_etco2_max_tag         20
#define AlarmLimitsRequest_flow_min_tag          21
#define AlarmLimitsRequest_flow_max_tag          22
#define AlarmLimitsRequest_apnea_min_tag         23
#define AlarmLimitsRequest_apnea_max_tag         24
#define AlarmLimitsRequest_spo2_min_tag          25
#define AlarmLimitsRequest_spo2_max_tag          26
#define Alarms_time_tag                          1
#define Alarms_alarm_one_tag                     2
#define Alarms_alarm_two_tag                     3
#define Announcement_time_tag                    1
#define Announcement_announcement_tag            2
#define BatteryPower_power_left_tag              1
#define CycleMeasurements_time_tag               1
#define CycleMeasurements_vt_tag                 2
#define CycleMeasurements_rr_tag                 3
#define CycleMeasurements_peep_tag               4
#define CycleMeasurements_pip_tag                5
#define CycleMeasurements_ip_tag                 6
#define CycleMeasurements_ve_tag                 7
#define ExpectedLogEvent_id_tag                  1
#define LogEvent_id_tag                          1
#define LogEvent_time_tag                        2
#define LogEvent_code_tag                        3
#define LogEvent_old_value_tag                   4
#define LogEvent_new_value_tag                   5
#define NextLogEvents_next_expected_tag          1
#define NextLogEvents_total_tag                  2
#define NextLogEvents_remaining_tag              3
#define NextLogEvents_elements_tag               4
#define Parameters_time_tag                      1
#define Parameters_mode_tag                      2
#define Parameters_pip_tag                       3
#define Parameters_peep_tag                      4
#define Parameters_vt_tag                        5
#define Parameters_rr_tag                        6
#define Parameters_ie_tag                        7
#define Parameters_fio2_tag                      8
#define Parameters_flow_tag                      9
#define Parameters_ventilating_tag               10
#define ParametersRequest_time_tag               1
#define ParametersRequest_mode_tag               2
#define ParametersRequest_pip_tag                3
#define ParametersRequest_peep_tag               4
#define ParametersRequest_vt_tag                 5
#define ParametersRequest_rr_tag                 6
#define ParametersRequest_ie_tag                 7
#define ParametersRequest_fio2_tag               8
#define ParametersRequest_flow_tag               9
#define ParametersRequest_ventilating_tag        10
#define Ping_time_tag                            1
#define Ping_id_tag                              2
#define ScreenStatus_lock_tag                    1
#define SensorMeasurements_time_tag              1
#define SensorMeasurements_cycle_tag             2
#define SensorMeasurements_paw_tag               3
#define SensorMeasurements_flow_tag              4
#define SensorMeasurements_volume_tag            5
#define SensorMeasurements_fio2_tag              6
#define SensorMeasurements_spo2_tag              7

/* Struct field encoding specification for nanopb */
#define Alarms_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   time,              1) \
X(a, STATIC,   SINGULAR, BOOL,     alarm_one,         2) \
X(a, STATIC,   SINGULAR, BOOL,     alarm_two,         3)
#define Alarms_CALLBACK NULL
#define Alarms_DEFAULT NULL

#define AlarmLimits_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   rr_min,            1) \
X(a, STATIC,   SINGULAR, UINT32,   rr_max,            2) \
X(a, STATIC,   SINGULAR, UINT32,   pip_min,           3) \
X(a, STATIC,   SINGULAR, UINT32,   pip_max,           4) \
X(a, STATIC,   SINGULAR, UINT32,   peep_min,          5) \
X(a, STATIC,   SINGULAR, UINT32,   peep_max,          6) \
X(a, STATIC,   SINGULAR, UINT32,   ip_above_peep_min,   7) \
X(a, STATIC,   SINGULAR, UINT32,   ip_above_peep_max,   8) \
X(a, STATIC,   SINGULAR, UINT32,   insp_time_min,     9) \
X(a, STATIC,   SINGULAR, UINT32,   insp_time_max,    10) \
X(a, STATIC,   SINGULAR, UINT32,   fio2_min,         11) \
X(a, STATIC,   SINGULAR, UINT32,   fio2_max,         12) \
X(a, STATIC,   SINGULAR, UINT32,   paw_min,          13) \
X(a, STATIC,   SINGULAR, UINT32,   paw_max,          14) \
X(a, STATIC,   SINGULAR, UINT32,   mve_min,          15) \
X(a, STATIC,   SINGULAR, UINT32,   mve_max,          16) \
X(a, STATIC,   SINGULAR, UINT32,   tv_min,           17) \
X(a, STATIC,   SINGULAR, UINT32,   tv_max,           18) \
X(a, STATIC,   SINGULAR, UINT32,   etco2_min,        19) \
X(a, STATIC,   SINGULAR, UINT32,   etco2_max,        20) \
X(a, STATIC,   SINGULAR, UINT32,   flow_min,         21) \
X(a, STATIC,   SINGULAR, UINT32,   flow_max,         22) \
X(a, STATIC,   SINGULAR, UINT32,   apnea_min,        23) \
X(a, STATIC,   SINGULAR, UINT32,   apnea_max,        24) \
X(a, STATIC,   SINGULAR, UINT32,   spo2_min,         25) \
X(a, STATIC,   SINGULAR, UINT32,   spo2_max,         26)
#define AlarmLimits_CALLBACK NULL
#define AlarmLimits_DEFAULT NULL

#define AlarmLimitsRequest_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   rr_min,            1) \
X(a, STATIC,   SINGULAR, UINT32,   rr_max,            2) \
X(a, STATIC,   SINGULAR, UINT32,   pip_min,           3) \
X(a, STATIC,   SINGULAR, UINT32,   pip_max,           4) \
X(a, STATIC,   SINGULAR, UINT32,   peep_min,          5) \
X(a, STATIC,   SINGULAR, UINT32,   peep_max,          6) \
X(a, STATIC,   SINGULAR, UINT32,   ip_above_peep_min,   7) \
X(a, STATIC,   SINGULAR, UINT32,   ip_above_peep_max,   8) \
X(a, STATIC,   SINGULAR, UINT32,   insp_time_min,     9) \
X(a, STATIC,   SINGULAR, UINT32,   insp_time_max,    10) \
X(a, STATIC,   SINGULAR, UINT32,   fio2_min,         11) \
X(a, STATIC,   SINGULAR, UINT32,   fio2_max,         12) \
X(a, STATIC,   SINGULAR, UINT32,   paw_min,          13) \
X(a, STATIC,   SINGULAR, UINT32,   paw_max,          14) \
X(a, STATIC,   SINGULAR, UINT32,   mve_min,          15) \
X(a, STATIC,   SINGULAR, UINT32,   mve_max,          16) \
X(a, STATIC,   SINGULAR, UINT32,   tv_min,           17) \
X(a, STATIC,   SINGULAR, UINT32,   tv_max,           18) \
X(a, STATIC,   SINGULAR, UINT32,   etco2_min,        19) \
X(a, STATIC,   SINGULAR, UINT32,   etco2_max,        20) \
X(a, STATIC,   SINGULAR, UINT32,   flow_min,         21) \
X(a, STATIC,   SINGULAR, UINT32,   flow_max,         22) \
X(a, STATIC,   SINGULAR, UINT32,   apnea_min,        23) \
X(a, STATIC,   SINGULAR, UINT32,   apnea_max,        24) \
X(a, STATIC,   SINGULAR, UINT32,   spo2_min,         25) \
X(a, STATIC,   SINGULAR, UINT32,   spo2_max,         26)
#define AlarmLimitsRequest_CALLBACK NULL
#define AlarmLimitsRequest_DEFAULT NULL

#define SensorMeasurements_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   time,              1) \
X(a, STATIC,   SINGULAR, UINT32,   cycle,             2) \
X(a, STATIC,   SINGULAR, FLOAT,    paw,               3) \
X(a, STATIC,   SINGULAR, FLOAT,    flow,              4) \
X(a, STATIC,   SINGULAR, FLOAT,    volume,            5) \
X(a, STATIC,   SINGULAR, FLOAT,    fio2,              6) \
X(a, STATIC,   SINGULAR, FLOAT,    spo2,              7)
#define SensorMeasurements_CALLBACK NULL
#define SensorMeasurements_DEFAULT NULL

#define CycleMeasurements_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   time,              1) \
X(a, STATIC,   SINGULAR, FLOAT,    vt,                2) \
X(a, STATIC,   SINGULAR, FLOAT,    rr,                3) \
X(a, STATIC,   SINGULAR, FLOAT,    peep,              4) \
X(a, STATIC,   SINGULAR, FLOAT,    pip,               5) \
X(a, STATIC,   SINGULAR, FLOAT,    ip,                6) \
X(a, STATIC,   SINGULAR, FLOAT,    ve,                7)
#define CycleMeasurements_CALLBACK NULL
#define CycleMeasurements_DEFAULT NULL

#define Parameters_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   time,              1) \
X(a, STATIC,   SINGULAR, UENUM,    mode,              2) \
X(a, STATIC,   SINGULAR, FLOAT,    pip,               3) \
X(a, STATIC,   SINGULAR, FLOAT,    peep,              4) \
X(a, STATIC,   SINGULAR, FLOAT,    vt,                5) \
X(a, STATIC,   SINGULAR, FLOAT,    rr,                6) \
X(a, STATIC,   SINGULAR, FLOAT,    ie,                7) \
X(a, STATIC,   SINGULAR, FLOAT,    fio2,              8) \
X(a, STATIC,   SINGULAR, FLOAT,    flow,              9) \
X(a, STATIC,   SINGULAR, BOOL,     ventilating,      10)
#define Parameters_CALLBACK NULL
#define Parameters_DEFAULT NULL

#define ParametersRequest_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   time,              1) \
X(a, STATIC,   SINGULAR, UENUM,    mode,              2) \
X(a, STATIC,   SINGULAR, FLOAT,    pip,               3) \
X(a, STATIC,   SINGULAR, FLOAT,    peep,              4) \
X(a, STATIC,   SINGULAR, FLOAT,    vt,                5) \
X(a, STATIC,   SINGULAR, FLOAT,    rr,                6) \
X(a, STATIC,   SINGULAR, FLOAT,    ie,                7) \
X(a, STATIC,   SINGULAR, FLOAT,    fio2,              8) \
X(a, STATIC,   SINGULAR, FLOAT,    flow,              9) \
X(a, STATIC,   SINGULAR, BOOL,     ventilating,      10)
#define ParametersRequest_CALLBACK NULL
#define ParametersRequest_DEFAULT NULL

#define Ping_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   time,              1) \
X(a, STATIC,   SINGULAR, UINT32,   id,                2)
#define Ping_CALLBACK NULL
#define Ping_DEFAULT NULL

#define Announcement_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   time,              1) \
X(a, STATIC,   SINGULAR, BYTES,    announcement,      2)
#define Announcement_CALLBACK NULL
#define Announcement_DEFAULT NULL

#define LogEvent_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   id,                1) \
X(a, STATIC,   SINGULAR, UINT32,   time,              2) \
X(a, STATIC,   SINGULAR, UENUM,    code,              3) \
X(a, STATIC,   SINGULAR, FLOAT,    old_value,         4) \
X(a, STATIC,   SINGULAR, FLOAT,    new_value,         5)
#define LogEvent_CALLBACK NULL
#define LogEvent_DEFAULT NULL

#define ExpectedLogEvent_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   id,                1)
#define ExpectedLogEvent_CALLBACK NULL
#define ExpectedLogEvent_DEFAULT NULL

#define NextLogEvents_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   next_expected,     1) \
X(a, STATIC,   SINGULAR, UINT32,   total,             2) \
X(a, STATIC,   SINGULAR, UINT32,   remaining,         3) \
X(a, CALLBACK, REPEATED, MESSAGE,  elements,          4)
#define NextLogEvents_CALLBACK pb_default_field_callback
#define NextLogEvents_DEFAULT NULL
#define NextLogEvents_elements_MSGTYPE LogEvent

#define ActiveLogEvents_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, UINT32,   id,                1)
#define ActiveLogEvents_CALLBACK pb_default_field_callback
#define ActiveLogEvents_DEFAULT NULL

#define BatteryPower_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   power_left,        1)
#define BatteryPower_CALLBACK NULL
#define BatteryPower_DEFAULT NULL

#define ScreenStatus_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     lock,              1)
#define ScreenStatus_CALLBACK NULL
#define ScreenStatus_DEFAULT NULL

extern const pb_msgdesc_t Alarms_msg;
extern const pb_msgdesc_t AlarmLimits_msg;
extern const pb_msgdesc_t AlarmLimitsRequest_msg;
extern const pb_msgdesc_t SensorMeasurements_msg;
extern const pb_msgdesc_t CycleMeasurements_msg;
extern const pb_msgdesc_t Parameters_msg;
extern const pb_msgdesc_t ParametersRequest_msg;
extern const pb_msgdesc_t Ping_msg;
extern const pb_msgdesc_t Announcement_msg;
extern const pb_msgdesc_t LogEvent_msg;
extern const pb_msgdesc_t ExpectedLogEvent_msg;
extern const pb_msgdesc_t NextLogEvents_msg;
extern const pb_msgdesc_t ActiveLogEvents_msg;
extern const pb_msgdesc_t BatteryPower_msg;
extern const pb_msgdesc_t ScreenStatus_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Alarms_fields &Alarms_msg
#define AlarmLimits_fields &AlarmLimits_msg
#define AlarmLimitsRequest_fields &AlarmLimitsRequest_msg
#define SensorMeasurements_fields &SensorMeasurements_msg
#define CycleMeasurements_fields &CycleMeasurements_msg
#define Parameters_fields &Parameters_msg
#define ParametersRequest_fields &ParametersRequest_msg
#define Ping_fields &Ping_msg
#define Announcement_fields &Announcement_msg
#define LogEvent_fields &LogEvent_msg
#define ExpectedLogEvent_fields &ExpectedLogEvent_msg
#define NextLogEvents_fields &NextLogEvents_msg
#define ActiveLogEvents_fields &ActiveLogEvents_msg
#define BatteryPower_fields &BatteryPower_msg
#define ScreenStatus_fields &ScreenStatus_msg

/* Maximum encoded size of messages (where known) */
#define Alarms_size                              10
#define AlarmLimits_size                         167
#define AlarmLimitsRequest_size                  167
#define SensorMeasurements_size                  37
#define CycleMeasurements_size                   36
#define Parameters_size                          45
#define ParametersRequest_size                   45
#define Ping_size                                12
#define Announcement_size                        72
#define LogEvent_size                            24
#define ExpectedLogEvent_size                    6
/* NextLogEvents_size depends on runtime parameters */
/* ActiveLogEvents_size depends on runtime parameters */
#define BatteryPower_size                        6
#define ScreenStatus_size                        2

#ifdef __cplusplus
} /* extern "C" */
#endif

#ifdef __cplusplus
/* Message descriptors for nanopb */
namespace nanopb {
template <>
struct MessageDescriptor<Alarms> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 3;
    static PB_INLINE_CONSTEXPR const pb_msgdesc_t* fields() {
        return &Alarms_msg;
    }
};
template <>
struct MessageDescriptor<AlarmLimits> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 26;
    static PB_INLINE_CONSTEXPR const pb_msgdesc_t* fields() {
        return &AlarmLimits_msg;
    }
};
template <>
struct MessageDescriptor<AlarmLimitsRequest> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 26;
    static PB_INLINE_CONSTEXPR const pb_msgdesc_t* fields() {
        return &AlarmLimitsRequest_msg;
    }
};
template <>
struct MessageDescriptor<SensorMeasurements> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 7;
    static PB_INLINE_CONSTEXPR const pb_msgdesc_t* fields() {
        return &SensorMeasurements_msg;
    }
};
template <>
struct MessageDescriptor<CycleMeasurements> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 7;
    static PB_INLINE_CONSTEXPR const pb_msgdesc_t* fields() {
        return &CycleMeasurements_msg;
    }
};
template <>
struct MessageDescriptor<Parameters> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 10;
    static PB_INLINE_CONSTEXPR const pb_msgdesc_t* fields() {
        return &Parameters_msg;
    }
};
template <>
struct MessageDescriptor<ParametersRequest> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 10;
    static PB_INLINE_CONSTEXPR const pb_msgdesc_t* fields() {
        return &ParametersRequest_msg;
    }
};
template <>
struct MessageDescriptor<Ping> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 2;
    static PB_INLINE_CONSTEXPR const pb_msgdesc_t* fields() {
        return &Ping_msg;
    }
};
template <>
struct MessageDescriptor<Announcement> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 2;
    static PB_INLINE_CONSTEXPR const pb_msgdesc_t* fields() {
        return &Announcement_msg;
    }
};
template <>
struct MessageDescriptor<LogEvent> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 5;
    static PB_INLINE_CONSTEXPR const pb_msgdesc_t* fields() {
        return &LogEvent_msg;
    }
};
template <>
struct MessageDescriptor<ExpectedLogEvent> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 1;
    static PB_INLINE_CONSTEXPR const pb_msgdesc_t* fields() {
        return &ExpectedLogEvent_msg;
    }
};
template <>
struct MessageDescriptor<NextLogEvents> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 4;
    static PB_INLINE_CONSTEXPR const pb_msgdesc_t* fields() {
        return &NextLogEvents_msg;
    }
};
template <>
struct MessageDescriptor<ActiveLogEvents> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 1;
    static PB_INLINE_CONSTEXPR const pb_msgdesc_t* fields() {
        return &ActiveLogEvents_msg;
    }
};
template <>
struct MessageDescriptor<BatteryPower> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 1;
    static PB_INLINE_CONSTEXPR const pb_msgdesc_t* fields() {
        return &BatteryPower_msg;
    }
};
template <>
struct MessageDescriptor<ScreenStatus> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 1;
    static PB_INLINE_CONSTEXPR const pb_msgdesc_t* fields() {
        return &ScreenStatus_msg;
    }
};
}  // namespace nanopb

#endif  /* __cplusplus */


#endif
